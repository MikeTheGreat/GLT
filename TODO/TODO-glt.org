* NEXT STEPS:

** DONE GitDo
   CLOSED: [2016-09-15 Thu 22:21]
** GradingList
** Upload feedback
*** How to make this idempotent? SPLIT THIS INTO TWO COMMANDS - COMMIT FEEDBACK AND UPLOAD FEEDBACK
    Specifically, how to let instructors check in & tag stuff, then later on upload it?
    (Can I have call_shell continue on error (instead of exiting?))
*** Verify that students can't permenantly destroy feedback
**** (i.e., even if deleted it will remain in the project's history)
**** Verify that this will be true even if git-gc is run after deleting the file
*** FAQ about telling students not to delete the GLT tags (which they /will/ be able to do)

** HomeworkDescs aren't being sorted correctly, are they (no comparison method?)
** New homework: notify students that it was created

** Figure out how to clone and/or sync all the forked projects for a homework assignment

*** DONE Verify that args are parsing correctly
    CLOSED: [2016-09-14 Wed 01:38]
*** DONE Which directory to put everything into?
    CLOSED: [2016-09-14 Wed 01:39]
*** DONE Verify that 'all' will download all assignments
    CLOSED: [2016-09-14 Wed 13:55]
*** DONE Make sure that we can update existing repos
    CLOSED: [2016-09-14 Wed 10:23]
*** Figure out how to detect if git pull detected no changes
    Possibly figure out if the SHA-1 hash that 'head' refers to has changed?
*** Print out the list of updated assignments
*** Verify that untracked files in the student dir (such as grading feedback) will NOT be destroyed on update
from https://www.git-scm.com/docs/git-merge:
*Warning*: Running git merge with non-trivial uncommitted changes is discouraged: while possible, it may leave you in a state that is hard to back out of in the case of a conflict.
It looks like things should be fine AS LONG AS the instructor and student don't change each other's files (i.e., as long as there are no merge conflicts)
** add a 'clean_temp' function to delete dir & everything in it
	Always do this at the end of the program

** Delete students' projects when deleting their acounts
	TODO: Figure out how this could even work - how do we find their projects?
		Projects appear to have a 'forked from' field somewhere.  We could keep the ID of the original project
			and then delete anything that's forked from it
		Projects have a 'created by' field - maybe 

** Move GitLabUtils into CourseInfo object

** argparse can't group subparsers - create help description that groups them instead?
http://stackoverflow.com/questions/32017020/grouping-argparse-subparser-arguments

* Polish

** For a lot of the download,commit,upload stuff: it's very verbose

*** Capture stdout (via popen & communicate) & eat it?

*** Consistently build lists of stuff that worked & present them to the user

*** call_shell shouldn't produce output unless it needs to

** grep for os.sep & replace with os.path.join
* Needed docs
** DOCUMENT: How to connect to GitLab server via ssh
   (in glt_install.md)
** Add more documentation (commenting) in the .gitlabrc file
	Note that I can add command line options to override if needed/wanted

** Create students for a class: DOCUMENT THIS
	document that the name, username, password, and email are all required by GitLab

** Delete students for a class: DOCUMENT THIS

** Add homework

** Download homework
** Commit feedback
*** Specifically, this should be done before calling download homework again
** Upload Feedback
** GradingList
** GitDo
   
* Needed Tests
** Create students for a class: TEST THIS
** Delete students for a class: TEST THIS
** Add homework
* Don't forget
** Do all options need section / homework assign?  If so let's factor that out...
** If GLT adds a project but doesn't add that project to the course data file the project is lost - bullet-proof this?
** Look into Python temp directory?
   https://docs.python.org/2/library/tempfile.html#tempfile.mkdtemp
   It looks like this will create a temp dir for me (instead of me having to find a directory to use) but I still have to get rid of it 
** Add a 'check environment' option?  
	This can check for gitlab access, local git installed, ssh keys set up, etc?
	Could try to create a project on GitLab, then create a local repo, then push/pull?
** Would putting the class projects into a group make it easier for the students to find all the projects?
** Look into WebHooks in order to lock down GitLab
	[Students add each other to a project they created, unless I can do something about this :(]
	WebHooks are poorly documented and seem to only apply to commits, issues, and tags
	[[Maybe write a routine to verify that students have not shared their projects with anyone?]]

** Iron out email issue
	SMTP doesn't work?
	Maybe try it again but read the directions more carefully?


** Kanban cards?

** Ansible/Chef for setting up the server?
** Setting up GitLab
*** Email sending - SendGrid
*** TimeZone
https://www.borngeek.com/2015/02/27/setting-the-time-zone-in-gitlab/
** Setup Azure
	Modify to use SendGrid
	Pre-configured VMs: https://about.gitlab.com/2016/07/13/how-to-setup-a-gitlab-instance-on-microsoft-azure/?utm_medium=email&utm_source=marketo&utm_campaign=release+newsletter&utm_content=july+22+2016&mkt_tok=eyJpIjoiTnpBM01EY3lOekkzWW1NMiIsInQiOiJiR2pZNmk1MCtZOVYrTjVpN2xISTBaeUZEaXczSnI3VFZqVUxkM1hPVUlUSFhHVHl6TnpXSVlxYUZPYzN0OU12OXpHeGtwS3FIaTdKeHZLd2QxXC9UZEcrT08xcHVOQ2dpREM3MVNpNlNKSDQ9In0%3D

** How to distribute?
	pip package? app/executable?
		https://hynek.me/articles/sharing-your-labor-of-love-pypi-quick-and-dirty/	
		https://packaging.python.org/en/latest/	
		https://pip.pypa.io/en/latest/reference/
		https://pypi.python.org/pypi/pip/
	Ansible/Chef recipe?
 
** Create a forum for people to ask questions about GLT?

** Possibly use pygit2, or dulwich, or python-git instead of parsing command-line git calls?

*** https://www.dulwich.io/docs/tutorial/repo.html

* Finished
** DONE Figure out how the projects are linked
   CLOSED: [2016-09-12 Mon 21:57]
*** Create a bunch, then list projects to see how to find all the projects forked from the starter....
*** Optional 'forked_from_project' dict** DONE add a 'required env option' routine to factor out all that checking
   CLOSED: [2016-09-10 Sat 22:33]


** DONE Finish addHomework: upload the .git repo
   CLOSED: [2016-09-10 Sat 22:33]
	Double-check that admin can clone student repos (even if admin wasn't added as a member): YES!
	Merge starter project into (empty) server project & push back to server


** DONE how to idempotently allow for a HW project to be added 
   CLOSED: [2016-09-10 Sat 22:33]

*** Verify that this is working :)

*** In Course_Info.create_homework, when we try to create a HW assignmnet and fail (because it's already there) then go look it up so that we can try to (re-)add students to it



** DONE call_git should confirm success
   CLOSED: [2016-09-10 Sat 22:30]

** DONE: Iron out IP issue with Cascadia
** DONE: Create students: Go back and add them to any assignments that have been created for the course
** DONE: Input files: lastname, firstname - STILL A BUG??
** DONE: double check that students can sign themselves out of a group
	YEP, THEY SURE CAN
	In which case we DO need the local list of who's in a class
	We could probably assume that any projects in that group are homework assignments, though
** DONE: Change from known good list file EnvVar to a directory that we control
	Use it for KGL, list of homework assignments, etc

	Add env. variable
	open a file based on the section
	Test CourseInfo ctor
	Return courseInfo (instead of student_list)

	add 'write to file' method to CourseInfo
	Test that it works
** DONE: Delete students from a class
** DONE: Create a printError function
	with colors
	to stderr
** DONE: Double-check that I'm checking for stuff in env by using "key in env"
** DONE: Double-check the subparser stuff
** DONE: Can I use a parent parser for handling the common args?
** DONE: Switch argparser to using subparsers instead of piles of optional args
** DONE: Create a 'load_student_list' function, to load students from file
** DONE: Create 'LoadEnv' function
	have parser print & exit when asked for help
	if section parameter is present just load the lkg list
	return the env & known_good accounts list
	DONE: enum for env names
** DONE: Create students for a class
	read student list from file
		DONE: modify the csv_reader to accept 3 or 4 columns
			specify 3 vs.4 columns with an enum: http://stackoverflow.com/a/1695250/250610 
			throw an exception in 4-col (Internal) mode when missing 4th column
				Maybe have an error message that includes details of how to fix the file?
					I.e., either remove the offending line, or else lookup the ID**
		Use csv module to read/write internal files?
				these don't seem to support removal of comments
				Could I subclass File & strip comments out of the stream?
				=== Resolved: It'll be more work than benefit

	read KnownGoodAccounts file
		find duplicates, move them into the 'error' pile
	attempt to create student accounts
		move students into 'error' pile as they occur
	foreach error:
		print the error
	foreach good:
		re-write the KnownGoodAccounts file with the new info
		Name of this file should be specified in .gitlabrc
** DONE: Replace StudentsFromFile with a NamedTuple
	** from https://docs.python.org/2.7/library/collections.html**collections.namedtuple 
** DONE: Figure out how to roll up errors / success messages
	StudentCollection now has ok/notOk lists, we'll move from one to the other
	as they move through the 'pipeline' and errors are encountered
** DONE: PyUnit
	VS integration
	Selenium/WebDriver integration (done for chrome)
** DONE: Check: Can I create a GitLab account without an email address?
	NOPE :(	
** DONE: Fix PyLint warnings?
** DONE: rcfile: Should we have separate sections for VM vs. Azure server info ?
 		Nope - I'll just switch this back & forth as I test
** DONE: Remove the map thingee/kwargs
    	(messed up intellisense, notæ really useful itself)
** DONE: modify CSV reader to ignore '#....' comments, so we can put error messages into them
** DONE: Setup Azure, Install GitLab
** DONE: Add a command-line option for listing the projects
** DONE: command line integrated with (and overrides) rcfile
** DONE: config file to store lots of options
       use rcfile - once for the 'defaults' section, 
           then again for a given class (if specified)
** DONE: CLI cmd-line args
** DONE: Use the built-in Python map intead of the IterateOver____?  No - the improvement isn't immense, and what we've got works
** DONE: How to set up teacher project & student projects and/or have fork the teacher copy into the student groups?
** DONE: Figure out how to get the GitLab server to send email (SendGrid?)

** RETURN TO LATER (?):
 https://github.com/docopt/docopt
       from docopt import docopt
       Can I do substitution/interpolation of the 'glt.py' in the docstring?
